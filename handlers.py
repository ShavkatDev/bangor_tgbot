from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboard import main_menu_kb, group_choice_kb, back_to_main_kb
from timetable import load_cached_schedule, update_schedule_for_group
from weather import get_weather
from deadlines_storage import add_deadline, get_user_deadlines, remove_deadline
import asyncio
from datetime import datetime, timedelta

main_router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine)
class DeadlineStates(StatesGroup):
    waiting_for_deadline = State()

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@main_router.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=main_menu_kb)

# –ö–Ω–æ–ø–∫–∞ "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä–∞" ‚Üí –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
@main_router.callback_query(F.data == "choose_schedule_group")
async def choose_schedule(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=group_choice_kb)

# –í—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
@main_router.callback_query(F.data.startswith("group_"))
async def send_schedule(callback: types.CallbackQuery):
    group_id = int(callback.data.split("_")[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥—Ä—É–ø–ø–∞ 232
    if group_id == 232:
        schedule = load_cached_schedule(group_id)
        if schedule == "‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.":
            await callback.message.edit_text("–û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...", reply_markup=back_to_main_kb)
            update_schedule_for_group(group_id)
            schedule = load_cached_schedule(group_id)
        await callback.message.edit_text(
            f"<b>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}:</b>\n\n{schedule[:4000]}",
            reply_markup=back_to_main_kb
        )
    else:
        await callback.message.edit_text(
            "‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.",
            reply_markup=back_to_main_kb
        )

# –ö–Ω–æ–ø–∫–∞ "üå§Ô∏è –ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
@main_router.callback_query(F.data == "weather_today")
async def weather_today(callback: types.CallbackQuery):
    temp, description, city = get_weather(city="Tashkent")
    
    if temp is None:
        await callback.message.edit_text(description, reply_markup=back_to_main_kb)
        return
    
    # –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≥–æ–¥–æ–π
    weather_message = f"üå§Ô∏è <b>–ü–æ–≥–æ–¥–∞ –≤ {city}:</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
    
    # –®—É—Ç–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–≥–æ–¥—ã
    if "—Å–æ–ª–Ω–µ—á–Ω–æ" in description.lower():
        weather_message += "–°–µ–≥–æ–¥–Ω—è —Å–æ–ª–Ω–µ—á–Ω–æ, –ø–æ—ç—Ç–æ–º—É –Ω–∞–¥–µ–≤–∞–µ–º —à–ª—ë–ø–∫–∏ –∏ –±–µ—Ä—ë–º –∫—Ä–µ–º –æ—Ç –∑–∞–≥–∞—Ä–∞! ‚òÄÔ∏è"
    elif "–¥–æ–∂–¥—å" in description.lower() or "–¥–æ–∂–¥–ª–∏–≤–æ" in description.lower():
        weather_message += "–ñ–¥—ë–º –¥–æ–∂–¥–∏–∫, –±–µ—Ä—ë–º –∑–æ–Ω—Ç–∏–∫! ‚òî"
    elif "–æ–±–ª–∞—á–Ω–æ" in description.lower():
        weather_message += "–û–±–ª–∞—á–Ω–æ, –Ω–æ –Ω–µ —É–Ω—ã–≤–∞–µ–º ‚Äî –∏–¥–µ–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è —É—á—ë–±—ã! ‚òÅÔ∏è"
    elif "—Å–Ω–µ–≥" in description.lower():
        weather_message += "–°–Ω–µ–∂–æ–∫ –∏–¥—ë—Ç! –õ–µ–ø–∏–º —Å–Ω–µ–≥–æ–≤–∏–∫–∞ –∏ –ø—å—ë–º –≥–æ—Ä—è—á–∏–π —á–∞–π! ‚ùÑÔ∏è"
    elif "—Ç—É–º–∞–Ω" in description.lower():
        weather_message += "–¢—É–º–∞–Ω –Ω–∞ —É–ª–∏—Ü–µ, –∫–∞–∫ –≤ —Ñ–∏–ª—å–º–µ —É–∂–∞—Å–æ–≤! –ò–¥—ë–º –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ! üå´Ô∏è"
    else:
        weather_message += "–ü–æ–≥–æ–¥–∞ –∫–∞–∫–∞—è-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–∞—è, –Ω–æ –º—ã —Å–ø—Ä–∞–≤–∏–º—Å—è! üòÑ"
    
    await callback.message.edit_text(
        weather_message,
        reply_markup=back_to_main_kb,
        parse_mode="HTML"
    )

# –ö–Ω–æ–ø–∫–∞ "üó∫Ô∏è –ö–∞—Ä—Ç–∞ —É–Ω–∏–≤–µ—Ä–∞"
@main_router.callback_query(F.data == "university_map")
async def university_map(callback: types.CallbackQuery):
    map_url = "https://www.google.com/maps/place/41.2694196305786,69.20319149945648"
    map_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É", url=map_url)],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
    )
    await callback.message.edit_text(
        "üìç –ö–∞—Ä—Ç–∞ –∫–∞–º–ø—É—Å–∞ MDIS Tashkent:",
        reply_markup=map_kb
    )

# –ö–Ω–æ–ø–∫–∞ "üìö Blackboard"
@main_router.callback_query(F.data == "blackboard")
async def blackboard(callback: types.CallbackQuery):
    blackboard_url = "https://inet.mdis.uz"
    blackboard_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìö –û—Ç–∫—Ä—ã—Ç—å Blackboard", url=blackboard_url)],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
    )
    await callback.message.edit_text(
        "üìö –î–æ—Å—Ç—É–ø –∫ Blackboard MDIS Tashkent:",
        reply_markup=blackboard_kb
    )

# –ö–Ω–æ–ø–∫–∞ "üì∞ –ù–æ–≤–æ—Å—Ç–∏ —É–Ω–∏–≤–µ—Ä–∞"
@main_router.callback_query(F.data == "university_news")
async def university_news(callback: types.CallbackQuery):
    news_url = "https://mdis.uz/news"
    news_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì∞ –ß–∏—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏", url=news_url)],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
    )
    await callback.message.edit_text(
        "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ MDIS Tashkent –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ:",
        reply_markup=news_kb
    )

# –ö–Ω–æ–ø–∫–∞ "‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö"
@main_router.callback_query(F.data == "deadlines_notifications")
async def deadlines_notifications(callback: types.CallbackQuery, state: FSMContext):
    deadlines = get_user_deadlines(callback.from_user.id)
    if not deadlines:
        await callback.message.edit_text(
            "‚è∞ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤.\n"
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω?",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω", callback_data="add_deadline")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ]
            )
        )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ–¥–ª–∞–π–Ω–æ–≤
        deadlines_text = "‚è∞ <b>–í–∞—à–∏ –¥–µ–¥–ª–∞–π–Ω—ã:</b>\n\n"
        for idx, deadline in enumerate(deadlines):
            deadlines_text += f"{idx + 1}. {deadline['name']} ‚Äî {deadline['datetime']}\n"
        await callback.message.edit_text(
            deadlines_text + "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω", callback_data="add_deadline")],
                    [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω", callback_data="remove_deadline")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ]
            ),
            parse_mode="HTML"
        )

# –ö–Ω–æ–ø–∫–∞ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω"
@main_router.callback_query(F.data == "add_deadline")
async def add_deadline_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ, –î–∞—Ç–∞, –í—Ä–µ–º—è\n"
        "–ü—Ä–∏–º–µ—Ä: –°–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –ø–æ Python, 2025-04-01, 15:00",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="deadlines_notifications")]
            ]
        )
    )
    await state.set_state(DeadlineStates.waiting_for_deadline)

# –ö–Ω–æ–ø–∫–∞ "üîÑ –í–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑"
@main_router.callback_query(F.data == "retry_deadline")
async def retry_deadline(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ, –î–∞—Ç–∞, –í—Ä–µ–º—è\n"
        "–ü—Ä–∏–º–µ—Ä: –°–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –ø–æ Python, 2025-04-01, 15:00",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="deadlines_notifications")]
            ]
        )
    )
    await state.set_state(DeadlineStates.waiting_for_deadline)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–µ–¥–ª–∞–π–Ω–∞
@main_router.message(StateFilter(DeadlineStates.waiting_for_deadline))
async def process_deadline_input(message: types.Message, state: FSMContext):
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–æ–¥ –Ω–∞ —á–∞—Å—Ç–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–∞—Ç–∞, –≤—Ä–µ–º—è
        parts = message.text.split(",")
        if len(parts) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ, –î–∞—Ç–∞, –í—Ä–µ–º—è")
        
        name = parts[0].strip()
        date_str = parts[1].strip()
        time_str = parts[2].strip()
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        deadline_datetime = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–¥–ª–∞–π–Ω –≤ –±—É–¥—É—â–µ–º
        if deadline_datetime <= datetime.now():
            raise ValueError("–î–µ–¥–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–¥–ª–∞–π–Ω
        add_deadline(message.from_user.id, name, deadline_datetime)
        
        await message.answer(
            f"‚úÖ –î–µ–¥–ª–∞–π–Ω '{name}' –Ω–∞ {deadline_datetime.strftime('%Y-%m-%d %H:%M')} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            "–Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –∑–∞ –¥–µ–Ω—å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞.",
            reply_markup=back_to_main_kb
        )
    except ValueError as e:
        await message.answer(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –§–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ, –î–∞—Ç–∞, –í—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –ø–æ Python, 2025-04-01, 15:00)",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –í–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑", callback_data="retry_deadline")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="deadlines_notifications")]
                ]
            )
        )
    finally:
        await state.clear()

# –ö–Ω–æ–ø–∫–∞ "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω"
@main_router.callback_query(F.data == "remove_deadline")
async def remove_deadline_start(callback: types.CallbackQuery):
    deadlines = get_user_deadlines(callback.from_user.id)
    if not deadlines:
        await callback.message.edit_text(
            "‚è∞ –£ –≤–∞—Å –Ω–µ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=back_to_main_kb
        )
        return
    
    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    buttons = []
    for idx, deadline in enumerate(deadlines):
        buttons.append([InlineKeyboardButton(
            text=f"–£–¥–∞–ª–∏—Ç—å: {deadline['name']} ({deadline['datetime']})",
            callback_data=f"delete_deadline_{idx}"
        )])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="deadlines_notifications")])
    
    await callback.message.edit_text(
        "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞
@main_router.callback_query(F.data.startswith("delete_deadline_"))
async def process_remove_deadline(callback: types.CallbackQuery):
    index = int(callback.data.split("_")[2])
    remove_deadline(callback.from_user.id, index)
    await callback.message.edit_text(
        "‚úÖ –î–µ–¥–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!",
        reply_markup=back_to_main_kb
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
@main_router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.edit_text("–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=main_menu_kb)